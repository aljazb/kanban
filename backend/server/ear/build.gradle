apply plugin: 'ear'

dependencies {
    deploy project(path: ':server:ejb', configuration: 'archives')
    deploy project(path: ':server:rest', configuration: 'archives')
}

/**
 * Add war project providedCompile dependencies to ear lib
 */
ext.DEBUG = true

def setEarLibs() {
    HashMap<String, ProjectDependency> deployments = new HashMap<>()

    configurations.deploy.allDependencies.forEach({ e ->
        if(e instanceof ProjectDependency) {
            deployments.put(e.name, e)
        }
    })

    if(ext.DEBUG){
        println("Deployments:")
        for(ProjectDependency pd : deployments.values()){
            printf("> %s \n", pd.name)
        }
    }


    configurations.deploy.allDependencies.forEach({it ->
        if(it instanceof ProjectDependency) {
            def path = it.dependencyProject.path

            evaluationDependsOn(path)
            Project p = findProject(path)

            if(ext.DEBUG) println("Found compile conf in deployment: " + p.name)
            p.configurations.compile.allDependencies.forEach {
                boolean isProject = it instanceof ProjectDependency
                if (
                    !isProject ||
                    (isProject && !deployments.containsKey(it.dependencyProject.name))
                ) {
                    if(ext.DEBUG) printf("> %s \n", it.name)

                    dependencies.add("earlib", it)
                }
            }
        }
    })
}
setEarLibs()

def excludeEarLibs() {
    configurations.earlib.exclude group: 'javax'
    configurations.earlib.exclude group: 'org.jboss.resteasy'
    //configurations.earlib.exclude group: 'org.keycloak'
    configurations.earlib.exclude group: 'org.hibernate'
    //configurations.earlib.exclude module: 'keycloak-core'
}
excludeEarLibs()

def printEarLibs(){
    println("Ear libs:")
    configurations.earlib.forEach({it ->
        printf("> %s \n", it.name)
    })
    println()
}

if(ext.DEBUG) printEarLibs()


/**
 * Ear deployment configuration
 */
def setProperties() {
    evaluationDependsOn(":server:rest")
    def warProject = project(":server:rest")
    ext.warArchive = warProject.name + "-" + warProject.version + ".war"
    ext.warContextRoot = warProject.warContextRoot

    evaluationDependsOn(":server:ejb")
    def ejbProject = project(":server:ejb")
    ext.ejbArchive = ejbProject.name + "-" + ((String)ejbProject.version) + ".jar"
}
setProperties()

ear {
    libDirName 'APP-INF/lib'
    deploymentDescriptor {
        version = "1"
        applicationName = "IS"
        initializeInOrder = true
        displayName = "IS Ear"
        description = "Demo project"
        module(project.ejbArchive, "ejb")
        webModule(project.warArchive, project.warContextRoot)
        securityRole "ADMINISTRATOR"
        securityRole "PRODUCT_OWNER"
        securityRole "KANBAN_MASTER"
        securityRole "DEVELOPER"
        securityRole "USER"
    }
}




